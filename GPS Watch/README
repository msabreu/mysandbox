GPS WATCH PROJECT STRUCTURE
----------------------------
The project consists of three executable entities:

1. A Java based GUI
2. A model running in xtUML eXecute along with some Java that handles GUI I/O 
3. A compiled program resulting from generated code plus some handwritten C that 
   does the equivalent of the Java code in 2

   
RUNNING THE PROJECT
--------------------
An execution configuration exists in order to launch the GUI. To create 
run the Watch GUI:

* Open the C/C++ Projects perspective (Window > Open Perspective > Other... > C/C++) 
* Run > Run Configurations...
* Expand the Java Application item
* Select "GPS Watch UI"
* Click Run

The GUI is designed to allow applications (xtUML eXecute sessions and generated 
code) to connect interchangeably, meaning there is no need to restart the GUI 
between various sessions. When a new connection is detected the GUI will simply 
drop any existing connection and only service the recently detected connection.

You can now run either the already generated Windows executable, Linux 
executable, or run the model in xtUML eXecute.

To run the EXE:
Windows:
  * Expand the Binaries item under the project
  * Right-click on "GPSWatch.exe" and choose Open With > System Editor
Linux:
  * Expand the Debug_Linux folder under the project
  * Right-click on GPSWatch.exe and select Properties
  * Under Resource > Permissions, make sure all the Execute checkboxes are 
    checked
  * Right-click on GPSWatch.exe, select "Run As > Run Configurations"
  * Create a new C/C++ Application Run Configuration for this GPSWatch.exe
    - Make sure the C/C++ Application field has "Debug_Linux/GPSWatch.exe"
    - Make sure the Build configuration: field is set to "Debug_Linux"
  * Select Run
* The application will connect to the GUI automatically.  Click the START/STOP 
  button on the watch, you will see the watch execute on the GUI and in the 
  command prompt console.  The MODE button causes GUI changes as well.

To run the model in xtUML eXecute:
* Switch to the xtUML Debugging Perspective (Window > Open Perspective > Other... > xtUML Debugging)
* Run > Debug Configurations...
* Expand the xtUML eXecute Application item
* Select "GPS Watch"
* Click Debug
* In Session Explorer, expand GPS Watch > System > GPS Watch::Library::UI > GPS Watch::Library::UI > UI (package) > UI
* Right-click 'connect', select Execute
* Now the GUI may be used to drive execution.

You will also notice a "GPS Watch with Initializer" launch configuration here. 
This launch does not use the interactive GUI.  Instead, it starts and automated 
test case that does its own stimulus and response.

To activate the "Goals" functionality, pause the watch as it is running then:
* In Session Explorer, expand GPS Watch > System > GPS Watch::Library::UI > GPS Watch::Library::UI > TestCases
* Right-click 'createGoals_1', select Execute
* Now start the watch again and press the "SET TARGET" button on the watch. 
  Goal indicator arrows will show on the UI.



BUILDING THE PROJECT
---------------------
The project is pre-built for Linux and Windows so it is ready to run, 
rebuilding is easy.

If you want to rebuild the project after modifying the model or a marking file:

* Switch to the C/C++ perspective
* Right-click on the project and choose 'Build Configurations > Set Active
Windows:
    * Choose "Release_Windows" or "Debug_Windows"
Linux:
    * Choose "Release_Linux" or "Debug_Linux"
* Right-click on the project and choose 'Build Project' in the context menu

There might be warnings/errors in the project resulting from an unresolved 
build path.
The Java code that is used to extend xtUML eXecute depends on a BridgePoint jar 
file called core.jar. If the path to core.jar is wrong you must follow these 
steps to resolve it:

* Open the Java perspective: Window > Open Perspective > Java
* Right-click the project and select Build Path > Configure Build Path...
* In the wizard click the Libraries tab
* Select core.jar and click Edit...
* Locate core.jar:
    <BridgePoint installation folder>\eclipse_extensions\BridgePoint\eclipse\plugins\org.xtuml.bp.core_<version>\core.jar
* OK all pop-ups


Have fun!
